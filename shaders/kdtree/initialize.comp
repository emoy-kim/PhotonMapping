#version 460

layout (local_size_x = 512, local_size_y = 1, local_size_z = 1) in;

struct KdtreeNode
{
   int Index;
   int ParentIndex;
   int LeftChildIndex;
   int RightChildIndex;
};

struct Photon
{
   vec3 Power;
   vec3 Position;
   vec3 IncomingDirection;
};

layout (binding = 0, std430) buffer Root { KdtreeNode root[]; };
layout (binding = 1, std430) buffer Coordinates { float coordinates[]; };
layout (binding = 2, std430) buffer Photons { Photon photons[]; };

layout (location = 0) uniform int Size;

void main()
{
   int index = int(gl_GlobalInvocationID.x);
   int step = int(gl_WorkGroupSize.x * gl_NumWorkGroups.x);
   for (int i = index; i < Size; i += step) {
      root[i].Index = i;
      root[i].ParentIndex = -1;
      root[i].LeftChildIndex = -1;
      root[i].RightChildIndex = -1;

      coordinates[3 * i] = photons[i].Position.x;
      coordinates[3 * i + 1] = photons[i].Position.y;
      coordinates[3 * i + 2] = photons[i].Position.z;
   }
}